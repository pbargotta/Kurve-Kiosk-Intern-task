from pydantic import BaseModel, EmailStr, Field
from typing import Optional

# Base schema for Customer - used for both creating and returning customers
class CustomerBase(BaseModel):
  name: str = Field(..., min_length=1, max_length=255)
  age: int = Field(..., gt=0) # Age must be greater than 0
  email: EmailStr = Field(...) # Validates email format

# Schema for CREATING a customer - hence it inherits CustomerBase with no 'id' because 'id' is generated by the database
class CustomerCreate(CustomerBase):
  pass

# Schema for RETURNING a customer - includes 'id' because it exists in the database
class Customer(CustomerBase):
  id: int = Field(...)

  # Config class allows Pydantic to work with SQLAlchemy models - reads data from attributes, not just dict keys
  class Config:
    from_attributes = True

# Schema for UPDATING a customer - all fields are optional to allow partial updates.
class CustomerUpdate(BaseModel):
  name: Optional[str] = Field(None, min_length=1, max_length=255)
  age: Optional[int] = Field(None, gt=0)
  email: Optional[EmailStr] = Field(None)